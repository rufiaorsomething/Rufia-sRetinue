[manifest]
version = "1.0.0"
dump_lua = true
priority = 1


# Null cards
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''--If chips added, do chip add event and add the chips to the total
if effects[ii].chips then'''
position = 'before'
match_indent = true
payload = '''
if effects[ii].level_up then
	--if effects[ii].card then juice_card(effects[ii].card) end
	local hand_i = G.GAME.last_hand_played
	level_up_hand(effects[ii].card, hand_i, true, effects[ii].level_up)

	local col = G.C.GREEN
	
	G.E_MANAGER:add_event(Event({
		trigger = 'after',
		delay = 0.2,
		func = function()
			play_sound('tarot1')
			if effects[ii].card and effects[ii].card.juice_up then effects[ii].card:juice_up(0.8, 0.5) end
			G.TAROT_INTERRUPT_PULSE = true
			return true 
		end }))
	mult = mod_mult(mult + G.GAME.hands[hand_i].l_mult)
	update_hand_text({delay = 0}, {mult = mult, StatusText = true})

	G.E_MANAGER:add_event(Event({
		trigger = 'after',
		delay = 0.9,
		func = function()
			play_sound('tarot1')
			if effects[ii].card and effects[ii].card.juice_up then effects[ii].card:juice_up(0.8, 0.5) end
			return true 
		end }))
	hand_chips = mod_chips(hand_chips + G.GAME.hands[hand_i].l_chips)
	update_hand_text({delay = 0}, {chips = hand_chips, StatusText = true})

	G.E_MANAGER:add_event(Event({
		trigger = 'after',
		delay = 0.9,
		func = function()
			play_sound('tarot1')
			if effects[ii].card and effects[ii].card.juice_up then effects[ii].card:juice_up(0.8, 0.5) end
			G.TAROT_INTERRUPT_PULSE = nil
			return true
		end }))
	update_hand_text(
		{sound = 'button', volume = 0.7, pitch = 0.9, delay = 0},
		{level=G.GAME.hands[hand_i].level}
	)
	delay(1.3)
end
'''

# Hypnotic cards
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''check_for_unlock({type = 'hand', handname = text, disp_text = non_loc_disp_text, scoring_hand = scoring_hand, full_hand = G.play.cards})'''
position = 'after'
match_indent = true
payload = '''
	--local hypnotics_in_hand = {}
	for hyp=1, #scoring_hand do
		scoring_hand[hyp].hypnotic_in_hand = nil
	end

	for hyp=1, #G.hand.cards do
		if G.hand.cards[hyp].config.center == G.P_CENTERS.m_rufia_hypnotic and not G.hand.cards[hyp].debuff then
			scoring_hand[#scoring_hand + 1] = G.hand.cards[hyp]
			--hypnotics_in_hand[#hypnotics_in_hand + 1] = G.hand.cards[hyp]
			G.hand.cards[hyp].hypnotic_in_hand = true
			highlight_card(G.hand.cards[hyp],(#scoring_hand - 0.999)/5,'up')
		end
	end
'''



# Debuff shader for Torn, Sunder, Ripped and Shredded cards
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''self.children.center:draw_shader('debuff', nil, self.ARGS.send_to_shader)'''
position = 'before'
match_indent = true
payload = '''
if self.edition and self.edition.key == "e_rufia_torn" then	
	self.children.center:draw_shader('rufia_torn_debuff', nil, self.ARGS.send_to_shader)
	if self.children.front and self.ability.effect ~= 'Stone Card' and not self.config.center.replace_base_card then
		self.children.front:draw_shader('rufia_torn_debuff', nil, self.ARGS.send_to_shader)
	end
elseif self.edition and self.edition.key == "e_rufia_sundered" then	
	self.children.center:draw_shader('rufia_sundered_debuff', nil, self.ARGS.send_to_shader)
	if self.children.front and self.ability.effect ~= 'Stone Card' and not self.config.center.replace_base_card then
		self.children.front:draw_shader('rufia_sundered_debuff', nil, self.ARGS.send_to_shader)
	end
elseif self.edition and self.edition.key == "e_rufia_ripped" then	
	self.children.center:draw_shader('rufia_ripped_debuff', nil, self.ARGS.send_to_shader)
	if self.children.front and self.ability.effect ~= 'Stone Card' and not self.config.center.replace_base_card then
		self.children.front:draw_shader('rufia_ripped_debuff', nil, self.ARGS.send_to_shader)
	end
elseif self.edition and self.edition.key == "e_rufia_shredded" then	
	self.children.center:draw_shader('rufia_shredded_debuff', nil, self.ARGS.send_to_shader)
	if self.children.front and self.ability.effect ~= 'Stone Card' and not self.config.center.replace_base_card then
		self.children.front:draw_shader('rufia_shredded_debuff', nil, self.ARGS.send_to_shader)
	end
else
'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.children.front and self.ability.effect ~= 'Stone Card' and not self.config.center.replace_base_card then
                        self.children.front:draw_shader('debuff', nil, self.ARGS.send_to_shader)
                    end'''
position = 'after'
match_indent = true
payload = '''
end
'''



# Resized Jokers
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = 'if center.name == "Wee Joker" and (center.discovered or self.bypass_discovery_center) then'
position = "before"
match_indent = true
payload = '''
if (center.config.rufia_rescale) and (center.discovered or self.bypass_discovery_center) then 
    H = H*center.config.rufia_rescale.y
    W = W*center.config.rufia_rescale.x
    self.T.h = H
    self.T.w = W
end
'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = 'elseif self.config.center.name == "Wee Joker" then'
position = "before"
match_indent = true
payload = '''
elseif self.config.rufia_rescale then 
    self.T.h = H*self.config.rufia_rescale.y
    self.T.w = W*self.config.rufia_rescale.x
'''








# Joker Slot Playing cards
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.ability.set ~= "Enhanced" and obj.calculate and type(obj.calculate) == 'function' then'''
position = 'before'
match_indent = true
payload = '''
if context.cardarea == G.jokers and (self.ability.set == "Default" or self.ability.set == "Enhanced") then
	--print("playing card")
	if context.joker_main then
		--print("context.joker_main")

		--G.FUNCS.rufia_evaluate_card({self}, 1)

		--G.FUNCS.rufia_evaluate_card_retriggered({self}, 1)


		context.cardarea = G.play
		context.rufia_ignore_edition = true

		SMODS.score_card(self, context)

		context.cardarea = G.jokers
		context.rufia_ignore_edition = nil

	elseif context.after and not context.blueprint then
		--print("context.after")
		--G.FUNCS.rufia_destroy_scoring_cards({self})


		local cards_destroyed = {}
		SMODS.calculate_destroying_cards({
			full_hand = G.play.cards,
			scoring_hand = scoring_hand,
			scoring_name = text,
			poker_hands = poker_hands,
			--cardarea = v
			},
			cards_destroyed,
			{self} or nil)

		-- context.remove_playing_cards calculations
		if cards_destroyed[1] then
			SMODS.calculate_context({scoring_hand = scoring_hand, remove_playing_cards = true, removed = cards_destroyed})
		end
		
		-- TARGET: effects when cards are removed
		


		local glass_shattered = {}
		for k, v in ipairs(cards_destroyed) do
			if v.shattered then glass_shattered[#glass_shattered+1] = v end
		end

		check_for_unlock{type = 'shatter', shattered = glass_shattered}
		
		for i=1, #cards_destroyed do
			G.E_MANAGER:add_event(Event({
				func = function()
					if SMODS.has_enhancement(cards_destroyed[i], 'm_glass') then
						cards_destroyed[i]:shatter()
					else
						cards_destroyed[i]:start_dissolve()
					end
					return true
				end
				}))
		end

	end

	if obj.calculate and type(obj.calculate) == 'function' then
		local o, t = obj:calculate(self, context)
		if o or t then return o, t end
	end

end
'''

# Disable regular edition calculations for Joker Slot Playing cards
# They get triggered elsewhere
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''local edition = card:calculate_edition(context)
        if edition then
            ret.edition = edition
        end'''
position = "at"
match_indent = true
payload = '''
local edition = card:calculate_edition(context)
if edition and not (context.cardarea == G.jokers and (card.ability.set == "Default" or card.ability.set == "Enhanced")) then
	ret.edition = edition
end
'''

#Fix Missing Sell button
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.ability.consumeable or self.ability.set == 'Joker' or (self.area and self.area == G.pack_cards) then'''
position = 'at'
match_indent = true
payload = '''if self.ability.consumeable or self.ability.set == 'Joker' or (self.area and self.area == G.pack_cards)
or (self.area and self.area == G.jokers) then'''